window.SIDEBAR_ITEMS = {"mod":[["unix_shmem","A Unix sharedmem implementation."]],"struct":[["DummyShMemService","A `ShMemService` dummy, that does nothing on start. Drop in for targets that donâ€™t need a server for ref counting and page creation."],["MmapShMem","Mmap-based The sharedmap impl for unix using [`shm_open`] and [`mmap`]. Default on `MacOS` and `iOS`, where we need a central point to unmap shared mem segments for dubious Mach kernel reasons."],["MmapShMemProvider","A [`ShMemProvider`] which uses `shmget`/`shmat`/`shmctl` to provide shared memory mappings."],["RcShMem","A Reference Counted shared map, that can use internal mutability. Useful if the `ShMemProvider` needs to keep local state."],["RcShMemProvider","A Reference Counted `ShMemProvider`, that can use internal mutability. Useful if the `ShMemProvider` needs to keep local state."],["ShMemCursor","A cursor around [`ShMem`] that immitates [`std::io::Cursor`]. Notably, this implements [`Write`] for [`ShMem`] in std environments."],["ShMemDescription","Description of a shared map. May be used to restore the map by id."],["ShMemId","An id associated with a given shared memory mapping ([`ShMem`]), which can be used to establish shared-mappings between proccesses."]],"trait":[["ShMem","A [`ShMem`] is an interface to shared maps. They are the backbone of [`crate::bolts::llmp`] for inter-process communication. All you need for scaling on a new target is to implement this interface, as well as the respective [`ShMemProvider`]."],["ShMemProvider","A [`ShMemProvider`] provides access to shared maps. They are the backbone of [`crate::bolts::llmp`] for inter-process communication. All you need for scaling on a new target is to implement this interface, as well as the respective [`ShMem`]."]],"type":[["StdShMemProvider","The default [`ShMemProvider`] for this os."],["StdShMemService","The standard sharedmem service"]]};