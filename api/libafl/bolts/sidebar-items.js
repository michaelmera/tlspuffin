window.SIDEBAR_ITEMS = {"fn":[["current_milliseconds","Gets current milliseconds since [`UNIX_EPOCH`]"],["current_nanos","Gets current nanoseconds since [`UNIX_EPOCH`]"],["current_time","Current time"],["format_duration_hms","Format a `Duration` into a HMS string"],["xxh3_rrmxmx_mixer","Given a u64 number, return a hashed number using this mixing function This function is used to hash an address into a more random number (used in `libafl_frida`). Mixing function: http://mostlymangling.blogspot.com/2018/07/on-mixing-functions-in-fast-splittable.html"]],"mod":[["anymap","Poor-rust-man’s downcasts to have `AnyMap`"],["bolts_prelude","The purpose of this module is to alleviate imports of the bolts by adding a glob import."],["build_id","Based on https://github.com/alecmocatta/build_id (C) Alec Mocatta alec@mocatta.net under license MIT or Apache 2"],["compress","Compression of events passed between a broker and clients. Currently we use the gzip compression algorithm for its fast decompression performance."],["core_affinity","This crate manages CPU affinities."],["cpu","Architecture agnostic processor features"],["fs","`LibAFL` functionality for filesystem interaction"],["launcher","The [`Launcher`] launches multiple fuzzer instances in parallel. Thanks to it, we won’t need a `for` loop in a shell script…"],["llmp","A library for low level message passing"],["minibsod","Implements a mini-bsod generator. It dumps all important registers and prints a stacktrace. You may use the [`crate::bolts::os::unix_signals::ucontext`] function to get a [`ucontext_t`]."],["os","Operating System specific abstractions"],["ownedref","Wrappers that abstracts references (or pointers) and owned data accesses."],["rands","The random number generators of `LibAFL`"],["serdeany","Poor-rust-man’s downcasts for stuff we send over the wire (or shared maps)"],["shmem","A generic shared memory region to be used by any functions (queues or feedbacks too.)"],["staterestore","Stores and restores state when a client needs to relaunch. Uses a [`ShMem`] up to a threshold, then write to disk."],["tuples","Compiletime lists/tuples used throughout the `LibAFL` universe"]],"trait":[["AsIter","Create an `Iterator` from a reference"],["AsIterMut","Create an `Iterator` from a mutable reference"],["AsMutSlice","Can be converted to a mutable slice"],["AsSlice","Can be converted to a slice"],["HasLen","Has a length field"],["HasRefCnt","Has a ref count"]]};