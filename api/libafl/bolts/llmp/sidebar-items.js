window.SIDEBAR_ITEMS = {"constant":[["LLMP_FLAG_COMPRESSED","This message was compressed in transit"],["LLMP_FLAG_FROM_B2B","From another broker."],["LLMP_FLAG_INITIALIZED","Unused…"]],"enum":[["Listener","Abstraction for listeners"],["ListenerStream","A listener stream abstraction"],["LlmpConnection","An Llmp instance"],["LlmpMsgHookResult","Result of an LLMP Message hook"],["TcpRequest","This is for the server the broker will spawn. If an llmp connection is local - use sharedmaps or remote (broker2broker) - forwarded via tcp"],["TcpResponse","Responses for requests to the server."]],"struct":[["LlmpBroker","The broker (node 0)"],["LlmpBrokerSignalHandler","A signal handler for the [`LlmpBroker`]."],["LlmpClient","Client side of LLMP"],["LlmpClientDescription","A restorable client description"],["LlmpDescription","Description of a shared map. May be used to restore the map by id."],["LlmpMsg","Message sent over the “wire”"],["LlmpPage","Contents of the share mem pages, used by llmp internally"],["LlmpReceiver","Receiving end on a (unidirectional) sharedmap channel"],["LlmpSender","Sending end on a (unidirectional) sharedmap channel"],["LlmpSharedMap","A page wrapper"],["TcpRemoteNewMessage","Messages for broker 2 broker connection."]],"type":[["BrokerId","The broker ID, for broker 2 broker communication."],["ClientId","The client ID == the sender id."],["Flags","The flags, indicating, for example, enabled compression."],["MessageId","The message ID, an ever-increasing number, unique only to a sharedmap/page."],["Tag","TAGs used throughout llmp"]]};